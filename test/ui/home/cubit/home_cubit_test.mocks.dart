// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_movie_app/test/ui/home/cubit/home_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_movie_app/data/models/models.dart' as _i2;
import 'package:flutter_movie_app/data/repositories/movie_repository.dart'
    as _i3;
import 'package:flutter_movie_app/data/repositories/person_repository.dart'
    as _i6;
import 'package:flutter_movie_app/data/repositories/tv_show_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetails_0 extends _i1.SmartFake implements _i2.MovieDetails {
  _FakeMovieDetails_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  @override
  _i4.Future<List<_i2.Movie>> getNowPlayingMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getNowPlayingMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Movie>>.value(
              <_i2.Movie>[],
            ),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getPopularMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Movie>>.value(
              <_i2.Movie>[],
            ),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getTopRatedMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getTopRatedMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Movie>>.value(
              <_i2.Movie>[],
            ),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getUpcomingMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Movie>>.value(
              <_i2.Movie>[],
            ),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<_i2.MovieDetails> getMovieDetails(String? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieDetails, [movieId]),
            returnValue: _i4.Future<_i2.MovieDetails>.value(
              _FakeMovieDetails_0(
                this,
                Invocation.method(#getMovieDetails, [movieId]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.MovieDetails>.value(
              _FakeMovieDetails_0(
                this,
                Invocation.method(#getMovieDetails, [movieId]),
              ),
            ),
          )
          as _i4.Future<_i2.MovieDetails>);

  @override
  _i4.Future<List<_i2.Cast>> getMovieCasts(String? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieCasts, [movieId]),
            returnValue: _i4.Future<List<_i2.Cast>>.value(<_i2.Cast>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Cast>>.value(
              <_i2.Cast>[],
            ),
          )
          as _i4.Future<List<_i2.Cast>>);
}

/// A class which mocks [TvShowRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvShowRepository extends _i1.Mock implements _i5.TvShowRepository {
  @override
  _i4.Future<List<_i2.TvShow>> getPopularTvShows() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularTvShows, []),
            returnValue: _i4.Future<List<_i2.TvShow>>.value(<_i2.TvShow>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.TvShow>>.value(
              <_i2.TvShow>[],
            ),
          )
          as _i4.Future<List<_i2.TvShow>>);
}

/// A class which mocks [PersonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersonRepository extends _i1.Mock implements _i6.PersonRepository {
  @override
  _i4.Future<List<_i2.Person>> getPopularPeople() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularPeople, []),
            returnValue: _i4.Future<List<_i2.Person>>.value(<_i2.Person>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Person>>.value(
              <_i2.Person>[],
            ),
          )
          as _i4.Future<List<_i2.Person>>);
}
